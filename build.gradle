buildscript {
    ext {
        gradleUploadPlugin = '2.3.1'
        sonarVersion = '2.6.2'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("com.bmuschko:gradle-nexus-plugin:${gradleUploadPlugin}")
        //todo: sonar
        //classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.nexus'

group = 'ru.xegex.strategy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

ext.moduleName = 'ru.xegex.strategy.starter'

bootJar {
    mainClassName = 'ru.xegex.strategy.starter.DefaultConfiguration'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'io.github.classgraph:classgraph:4.8.21'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.6'
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.6'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

nexus {
    String nexusLogin = ""
    String nexusPwd = ""

    if (project.hasProperty('nexusLogin')) {
        nexusLogin = project.property('nexusLogin')
    }
    if (project.hasProperty('nexusPwd')) {
        nexusPwd = project.property('nexusPwd')
    }

    sign = false
    repositoryUrl = "https://$nexusLogin:$nexusPwd@nexus.4digi.ru/repository/maven-releases/"
    snapshotRepositoryUrl = "https://$nexusLogin:$nexusPwd@nexus.4digi.ru/repository/maven-snapshots/"
}

//todo: should implement jpms
//compileJava {
//    inputs.property("moduleName", moduleName)
//    doFirst {
//        options.compilerArgs.addAll([
//                '--module-path', classpath.asPath,
//                '--add-modules', 'lombok'
//        ])
//        classpath = files()
//    }
//}